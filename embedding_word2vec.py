'''
Create word2vec embedding for the given sampling file(or the context file)
python embedding_word2vec.py -f acm/acm_sampling_1_clique.csv

Command: python embedding_word2vec.py -f <context-file>
'''
import argparse, gensim
from gensim.models import word2vec
from argparse import RawTextHelpFormatter


def generate_embeddings(context_file, sg, dimension, window, threads):
	try:
		context_file_ = open(context_file)
	except IOError:
		print('Could not read file: ', context_file)
		return

	contexts = word2vec.LineSentence(context_file)
	print('Generating word vectors...')
	model = word2vec.Word2Vec(contexts, sg=sg, size=dimension, window=window, workers=threads)
	context_file = context_file.split('/')[1]
	dataset = context_file.split('_')[0]
	khop = context_file.split('_')[2]
	graphtype = context_file.split('_')[3].replace(".csv","")
	model_fname_bin = dataset + '/embeddings/' + dataset + '_word2vec_'+ khop + '_' + graphtype + '.bin' 
	model_fname_txt = dataset + '/embeddings/' + dataset + '_word2vec_'+ khop + '_' + graphtype + '.txt' 
	print('Saving to ', model_fname_txt)
	model.save(model_fname_bin)
	model = gensim.models.Word2Vec.load(model_fname_bin)
	model.wv.save_word2vec_format(model_fname_txt, binary=False)


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Generate author embeddings.', formatter_class=RawTextHelpFormatter)
	parser.add_argument('-f','--context_file', dest='context_file', required=True,
			    help='Context file(REQUIRED, default: None)')
	parser.add_argument('-m','--model', dest='model', default=1,
			    help='Model used for generating vectors. \n0 - CBOW, 1 - skip-gram (default: 1)')
	parser.add_argument('-d','--dimension', dest='dimension', default=100,
			    help='Dimension of vectors generated by Word2Vec(default: 100)')
	parser.add_argument('-w','--window', dest='window_size', default=5,
			    help='Window size used for generating contexts(default: 5)')
	parser.add_argument('-t','--threads', dest='num_threads', default=15,
			    help='Number of threads used for generating contexts(default: 15)')
	args = parser.parse_args()

	generate_embeddings(context_file=args.context_file, sg=args.model, dimension=args.dimension, window=args.window_size,
					    threads=args.num_threads)
